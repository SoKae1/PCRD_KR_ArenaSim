<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pooler</name>
    </assembly>
    <members>
        <member name="T:Pooler.Base">
            <summary>
            Pooler base abstract class for Parallel and Repeater
            with constants, events, fields and functions for both classes.
            </summary>
        </member>
        <member name="F:Pooler.Base.RUNNING_TASKS_MAX_DEFAULT">
            <summary>
            Default maximum for parallely executed tasks in threads pool.
            </summary>
        </member>
        <member name="F:Pooler.Base.PAUSE_MILESECONDS_DEFAULT">
            <summary>
            Default miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.
            </summary>
        </member>
        <member name="E:Pooler.Base.AllDone">
            <summary>
            Event called after all tasks in store are done. First param is threads pool instance, second param is event arguments with possible synchronous tasks exceptions.
            </summary>
        </member>
        <member name="E:Pooler.Base.TaskDone">
            <summary>
            Event called after each task in store is done. First param is threads pool instance, second param is event arguments with possible task result and currently and simultaneously running tasks count.
            </summary>
        </member>
        <member name="E:Pooler.Base.TaskException">
            <summary>
            Event called from background thread when there is catched any exception in synchronously executed task.
            </summary>
        </member>
        <member name="F:Pooler.Base.threads">
            <summary>
            Tasks background executing threads store to abort them immediately if necessary.
            </summary>
        </member>
        <member name="F:Pooler.Base.runningTasksCount">
            <summary>
            Currently running tasks count.
            </summary>
        </member>
        <member name="F:Pooler.Base.runningTasksMax">
            <summary>
            Currently running tasks maximum.
            </summary>
        </member>
        <member name="F:Pooler.Base.executedTasksCount">
            <summary>
            Successfully executed tasks count.
            </summary>
        </member>
        <member name="F:Pooler.Base.runningTasksCountMax">
            <summary>
            Maximum peak of running threads in one moment in one executing process.
            </summary>
        </member>
        <member name="F:Pooler.Base.runningTasksLock">
            <summary>
            Lock for reading/writing from/into this.runningTasksCountMax;
            </summary>
        </member>
        <member name="F:Pooler.Base.pauseMiliseconds">
            <summary>
            Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.
            </summary>
        </member>
        <member name="F:Pooler.Base.pauseMilisecondsLock">
            <summary>
            Lock for reading/writing from/into this.pauseMiliseconds;
            </summary>
        </member>
        <member name="F:Pooler.Base.exceptions">
            <summary>
            Exceptions store for synchronously running task fails, returned in AllDone handler.
            </summary>
        </member>
        <member name="F:Pooler.Base.exceptionsLock">
            <summary>
            Lock for reading/writing from/into this.exceptions;
            </summary>
        </member>
        <member name="M:Pooler.Base.#ctor(System.Int32,System.Int32)">
            <summary>
            Create and return new threads pool instance, nowhere regstered, just created.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
        </member>
        <member name="M:Pooler.Base.GetMaxRunningTasks">
            <summary>
            Get running tasks maximum anytime you want.
            </summary>
            <returns>Maximum peak of running threads in one moment in one executing process.</returns>
        </member>
        <member name="M:Pooler.Base.SetMaxRunningTasks(System.Int32,System.Boolean)">
            <summary>
            Change running tasks maximum anytime you want. 
            If you count down this value, all threads will go to their normal end.
            If you increase this value, there will be started new threads to execute next tasks in tasks store.
            </summary>
            <param name="maxRunningTasks">Max parallely running tasks in background to execute all given tasks.</param>
            <param name="increaseHeapRun">Start executing all threads necessary to start in increasing
            in one moment by default or start executing store tasks by growing threads increasing, one threads after it's done 
            triggers new thread and than there are running 2 threads, two threads after they are done 
            triggers new 2 threads and than there are running 4 threads and so on to maximum.
            </param>
            <returns></returns>
        </member>
        <member name="M:Pooler.Base.GetPauseMiliseconds">
            <summary>
            Currently configured pause miliseconds value any time you want.
            </summary>
            <returns>Currently configured pause miliseconds value.</returns>
        </member>
        <member name="M:Pooler.Base.SetPauseMiliseconds(System.Int32)">
            <summary>
            Configure pause miliseconds value any time you want.
            </summary>
            <param name="pauseMiliseconds">Pause miliseconds to pause background execution thread by manual call pool.Pause() inside your job.</param>
        </member>
        <member name="M:Pooler.Base.StartProcessing(System.Boolean)">
            <summary>
            Start tasks store processing in it's threads.
            Run this method any time you want, normaly when you 
            add tasks into pool not run instantly.
            </summary>
            <param name="heapRun">Try to start executing all threads in one moment by default 
            or start executing store tasks by growing threads increasing, one threads after it's done 
            triggers new thread and than there are running 2 threads, two threads after they are done 
            triggers new 2 threads and than there are running 4 threads and so on to maximum.
            </param>
            <returns>Current threads pool instance.</returns>
        </member>
        <member name="M:Pooler.Base.Pause">
            <summary>
            Pause your running task by this call to slow down CPU or to release more any other computer resources by internal Thread.Sleep(); call with globaly configured miliseconds value, 0 by default.
            </summary>
        </member>
        <member name="M:Pooler.Base.AsyncTaskDone(System.Object)">
            <summary>
            Call this method in your task after all asynch code in your task is done
            to continue in next task in your threads pool.
            </summary>
            <param name="taskResult">If task was a function, put the result of the task into this place for TaskDone event.</param>
        </member>
        <member name="M:Pooler.Base.executeTask(Task)">
            <summary>
            Only execute given task in currently executed thread, 
            so there is no threading responsibility in this function.
            If task throw any exception, store the exception in exceptions 
            store and run ThreadException event imediatelly.
            </summary>
            <param name="task">Threads pool delegate or function from tasks store to execute.</param>
        </member>
        <member name="M:Pooler.Base.executingThreadEnd">
            <summary>
            This method is necessary to call internaly only in this.runningTasksLock lock object!
            Remove one from this.runningTasksCount, unregister current thread from this.threads;
            Execute AllDone event only if running tasks count are done.
            </summary>
        </member>
        <member name="M:Pooler.Base.taskDoneHasHandlers">
            <summary>
            Return true if there are any handlers attached on TaskDone event.
            </summary>
            <returns>True if any handler attached.</returns>
        </member>
        <member name="M:Pooler.Base.taskDoneInvoke(Pooler.TaskDoneEventArgs)">
            <summary>
            Invoke all handlers on event TaskDone without checking if there are any handlers appended.
            Use the this.taskDoneHasHandlers() function to check it.
            </summary>
            <param name="e">Event arguments instance for invoking  handlers.</param>
        </member>
        <member name="M:Pooler.Base.StopAll(System.Boolean)">
            <summary>
            Stop processing background threads immediately by thread.Abort() 
            or naturaly to set something to stop next tasks runs in this.done(); function.
            </summary>
            <param name="abortAllThreadsImmediately">Abord all threads by thread.Abort(); to stop background executing threads immediately.</param>
        </member>
        <member name="M:Pooler.Base.done(System.Object)">
            <summary>
            After synchronous task is done, this function is called internaly.
            After any asynchronous taks is done, there is necessary to call pool.AsyncTaskDone(); method manualy from task job function.
            This method has to run next task if there is need to run anything more.
            If there is no need to run anything more, the thread has to stops itself.
            If there is higher running threads count than maximum and it still needs to run some tasks,
            it has to create new thread to run another next task by: this.runExecutingTaskInNewThread();
            If there is lower running threads count than maximum, it has to stop itself.
            </summary>
            <param name="taskResult">If task was a function, put the result of the task into this place for TaskDone event.</param>
        </member>
        <member name="M:Pooler.Base.runExecutingTaskInNewThread">
            <summary>
            This function has to be called only inside this.runningTasksLock;
            It has to add one more into this.runningTasksCount, has to manage the this.runningTasksCountMax,
            it has to get task to process somewhere and it has to run the task in new registered background thread.
            </summary>
        </member>
        <member name="T:Pooler.AllDoneHandler">
            <summary>
            Event called after all tasks in store are done. First param is threads pool instance, second param is event arguments with possible synchronous tasks exceptions.
            </summary>
            <param name="pool">Threads instance pool instance.</param>
            <param name="poolAllDoneEventArgs">Event arguments object with Exceptions field as List&lt;Exception&gt; of synchronously executed threads catched exceptions.</param>
        </member>
        <member name="T:Pooler.TaskDoneHandler">
            <summary>
            Event called after each tasks in store is done. First param is threads pool instance, second param is event arguments with possible task result and currently and simultaneously running tasks count.
            </summary>
            <param name="pool">Threads instance pool instance.</param>
            <param name="poolTaskDoneEventArgs">Event arguments object with possible task result and currently and simultaneously running tasks count.</param>
        </member>
        <member name="T:Pooler.TaskExceptionHandler">
            <summary>
            Event called from background thread when there is catched any exception in synchronously executed task.
            </summary>
            <param name="pool">Threads instance pool instance.</param>
            <param name="poolTaskExceptionEventArgs">Event arguments object with Exception field as Exception of synchronously executed thread catched exception.</param>
        </member>
        <member name="T:Pooler.ParallelTaskDelegate">
            <summary>
            Any delegate added internaly into tasks store in Add() method with no params section or with single param accepting Pooler.Base type.
            </summary>
            <param name="pool">threads instance pool instance.</param>
        </member>
        <member name="T:Pooler.RepeaterTaskDelegate">
            <summary>
            Any delegate added internaly into tasks store in Add() method with no params section or with single param accepting Pooler.Base type.
            </summary>
            <param name="pool">threads instance pool instance.</param>
        </member>
        <member name="T:Pooler.AllDoneEventArgs">
            <summary>
            Event arguments object with Exceptions field as List&lt;Exception&gt; of synchronously executed threads catched exceptions.
            </summary>
        </member>
        <member name="T:Pooler.TaskDoneEventArgs">
            <summary>
            Event arguments object with possible task result and currently and simultaneously running threads count in threads pool.
            </summary>
        </member>
        <member name="T:Pooler.ExceptionEventArgs">
            <summary>
            Event arguments object with Exception field as Exception of synchronously executed thread catched exception.
            </summary>
        </member>
        <member name="T:Pooler.Parallel">
            <summary>
            Threads pool to execute any type of given tasks in background threads,
            driven by background executing threads variable count, possibly configured 
            in run and also driven by task pausing to save CPU or other resources from .NET environment,
            also possible to configure at run.
            Parallel thread pool gives you three events to get any exception in your executed task,
            event when each task is done and event when all tasks are done. In event, when each
            task is done you can get currently running executing threads count in background.
            In the same way much more in other events.
            </summary>
        </member>
        <member name="F:Pooler.Parallel._store">
            <summary>
            Tasks store to run in background threads.
            </summary>
        </member>
        <member name="F:Pooler.Parallel._instance">
            <summary>
            Static instance created only once.
            </summary>
        </member>
        <member name="F:Pooler.Parallel._instanceLock">
            <summary>
            Lock for reading/writing from/into this._instanceLock;
            </summary>
        </member>
        <member name="M:Pooler.Parallel.#ctor(System.Int32,System.Int32)">
            <summary>
            Create and return new threads pool instance, nowhere regstered, just created.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
        </member>
        <member name="M:Pooler.Parallel.GetStaticInstance(System.Int32,System.Int32)">
            <summary>
            Get single instance from Parallel.instance place created only once.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
            <returns>static instance created only once.</returns>
        </member>
        <member name="M:Pooler.Parallel.CreateNew(System.Int32,System.Int32)">
            <summary>
            Create and return new threads pool instance, nowhere regstered, just created.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
            <returns>New threads pool instance to use.</returns>
        </member>
        <member name="M:Pooler.Parallel.Add(System.Func{Pooler.Parallel,System.Object},System.Boolean,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Add task into threads pool to run.
            </summary>
            <param name="task">Any function added internaly into tasks store with with single param accepting Parallel type and returning any object as result.</param>
            <param name="runInstantly">If true by default, run added task instantly after adding in it's own thread in background. If false, call after all Add() method calls the method StartProcessing() to start pool processing.</param>
            <param name="priority">Background thread priority for task executing.</param>
            <param name="async">If task is using any other threads to work or async code, set this to true and call pool.AsyncTaskDone() call after your task is done manualy.</param>
            <returns>Current threads pool instance.</returns>
        </member>
        <member name="M:Pooler.Parallel.Add(Pooler.ParallelTaskDelegate,System.Boolean,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Add task into threads pool to run.
            </summary>
            <param name="task">Any delegate added internaly into tasks store with no params section or with single param accepting Parallel type.</param>
            <param name="runInstantly">If true by default, run added task instantly after adding in it's own thread in background. If false, call after all Add() method calls the method StartProcessing() to start pool processing.</param>
            <param name="priority">Background thread priority for task executing.</param>
            <param name="async">If task is using any other threads to work or async code, set this to true and call pool.AsyncTaskDone() call after your task is done manualy.</param>
            <returns>Current threads pool instance.</returns>
        </member>
        <member name="M:Pooler.Parallel.StopAll(System.Boolean)">
            <summary>
            Stop processing background threads immediately by thread.Abort() or naturaly to empty
            the tasks store and run all runnung background threads into their natural end.
            </summary>
            <param name="abortAllThreadsImmediately">Abord all threads by thread.Abort(); to stop background executing threads immediately.</param>
        </member>
        <member name="M:Pooler.Parallel.done(System.Object)">
            <summary>
            After synchronous task is done, this function is called internaly.
            After any asynchronous taks is done, there is necessary to call pool.AsyncTaskDone(); method manualy from task job function.
            This method normaly run next taks, first from internal tasks store.
            If there is no task in the store, the thread stops itself.
            If there is higher running threads count than maximum and still enough tasks in the store,
            it creates new thread to run those tasks by: this.runExecutingTaskInNewThread();
            If there is lower running threads count than maximum, it stop itself.
            </summary>
            <param name="taskResult">If task was a function, put the result of the task into this place for TaskDone event.</param>
        </member>
        <member name="M:Pooler.Parallel.runExecutingTaskInNewThread">
            <summary>
            This function has to be called only inside this.runningTasksLock;
            If there are no other task in store, it return at the beginning.
            It adds one more into this.runningTasksCount, manage the this.runningTasksCountMax,
            gets first task from tasks store and it runs the task in new registered background thread.
            </summary>
        </member>
        <member name="T:Pooler.Repeater">
            <summary>
            Threads pool to execute any type of one given task in background threads,
            driven by background executing threads variable count, possibly configured 
            in run and also driven by task pausing to save CPU or other resources from .NET environment,
            also possible to configure at run.
            Repeater thread pool gives you three events to get any exception in your executed task,
            event when each task is done and event when all tasks are done. In event, when each
            task is done you can get currently running executing threads count in background.
            In the same way much more in other events.
            </summary>
        </member>
        <member name="F:Pooler.Repeater._task">
            <summary>
            Task to run in background threads.
            </summary>
        </member>
        <member name="F:Pooler.Repeater._tasksCount">
            <summary>
            Tasks count to process repeatedly, null means infinite.
            </summary>
        </member>
        <member name="F:Pooler.Repeater._instance">
            <summary>
            Static instance created only once.
            </summary>
        </member>
        <member name="F:Pooler.Repeater._instanceLock">
            <summary>
            Lock for reading/writing from/into this._instance;
            </summary>
        </member>
        <member name="M:Pooler.Repeater.#ctor(System.Int32,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Create and return new threads pool instance, nowhere regstered, just created.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="tasksCount">Tasks count to process repeatedly, null means infinite.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
        </member>
        <member name="M:Pooler.Repeater.GetStaticInstance(System.Int32,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Get single instance from Parallel.instance place created only once.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="tasksCount">Tasks count to process repeatedly, null means infinite.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
            <returns>static instance created only once.</returns>
        </member>
        <member name="M:Pooler.Repeater.CreateNew(System.Int32,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Create and return new threads pool instance, nowhere regstered, just created.
            </summary>
            <param name="maxRunningTasks">Max threads running in parallel to execute given tasks.</param>
            <param name="tasksCount">Tasks count to process repeatedly, null means infinite.</param>
            <param name="pauseMiliseconds">Miliseconds for pooler.Pause(); call inside any task to slow down CPU or any other computer resources for each running thread in threads pool.</param>
            <returns>New threads pool instance to use.</returns>
        </member>
        <member name="M:Pooler.Repeater.GetTasksCount">
            <summary>
            Get total tasks count to repeatedly process, null means infinite count.
            You can get the value or null anytime you want at run.
            </summary>
            <returns>Tasks count to repeatedly process, null means infinite count.</returns>
        </member>
        <member name="M:Pooler.Repeater.SetTasksCount(System.Nullable{System.Int32})">
            <summary>
            Set total tasks count to repeatedly process, null means infinite count.
            You can set higher, lower value or null anytime you want at run.
            </summary>
            <param name="tasksCount">Tasks count to repeatedly process, null means infinite count.</param>
            <returns>Repeater instance.</returns>
        </member>
        <member name="M:Pooler.Repeater.Set(System.Func{Pooler.Repeater,System.Object},System.Boolean,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Set task into threads pool to run.
            </summary>
            <param name="task">Any function added internaly into tasks store with with single param accepting Parallel type and returning any object as result.</param>
            <param name="runInstantly">If true by default, run added task instantly after adding in it's own thread in background. If false, call after all Add() method calls the method StartProcessing() to start pool processing.</param>
            <param name="priority">Background thread priority for task executing.</param>
            <param name="async">If task is using any other threads to work or async code, set this to true and call pool.AsyncTaskDone() call after your task is done manualy.</param>
            <returns>Current threads pool instance.</returns>
        </member>
        <member name="M:Pooler.Repeater.Set(Pooler.RepeaterTaskDelegate,System.Boolean,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Set task into threads pool to run.
            </summary>
            <param name="task">Any delegate added internaly into tasks store with no params section or with single param accepting Parallel type.</param>
            <param name="runInstantly">If true by default, run added task instantly after adding in it's own thread in background. If false, call after all Add() method calls the method StartProcessing() to start pool processing.</param>
            <param name="priority">Background thread priority for task executing.</param>
            <param name="async">If task is using any other threads to work or async code, set this to true and call pool.AsyncTaskDone() call after your task is done manualy.</param>
            <returns>Current threads pool instance.</returns>
        </member>
        <member name="M:Pooler.Repeater.StopAll(System.Boolean)">
            <summary>
            Stop processing background threads immediately by thread.Abort() or naturaly to empty
            the tasks store and run all runnung background threads into their natural end.
            </summary>
            <param name="abortAllThreadsImmediately">Abord all threads by thread.Abort(); to stop background executing threads immediately.</param>
        </member>
        <member name="M:Pooler.Repeater.StopCurrent">
            <summary>
            this method stops current repeater thread,
            decrease one from this.runningTasksMax to 
            has less and less background threads and to go
            to the pool end point.
            </summary>
        </member>
        <member name="M:Pooler.Repeater.done(System.Object)">
            <summary>
            After synchronous task is done, this function is called internaly.
            After any asynchronous taks is done, there is necessary to call pool.AsyncTaskDone(); method manualy from task job function.
            This method normaly run next taks, first from internal tasks store.
            If there is no task in the store, the thread stops itself.
            If there is higher running threads count than maximum and still enough tasks in the store,
            it creates new thread to run those tasks by: this.runExecutingTaskInNewThread();
            If there is lower running threads count than maximum, it stop itself.
            </summary>
            <param name="taskResult">If task was a function, put the result of the task into this place for TaskDone event.</param>
        </member>
        <member name="M:Pooler.Repeater.runExecutingTaskInNewThread">
            <summary>
            This function has to be called only inside this.runningTasksLock;
            It ads one more into this.runningTasksCount, manage the this.runningTasksCountMax,
            gets first task from tasks store and it runs the task in new registered background thread.
            </summary>
        </member>
        <member name="T:Task">
            <summary>
            Task item for tasks store.
            </summary>
        </member>
        <member name="F:Task.Job">
            <summary>
            Task job to execute.
            </summary>
        </member>
        <member name="F:Task.Priority">
            <summary>
            Task background thread priority t run with.
            </summary>
        </member>
        <member name="F:Task.Async">
            <summary>
            If true, task is asynchronous, false if task is synchronous.
            </summary>
        </member>
    </members>
</doc>
